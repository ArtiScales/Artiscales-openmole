val folderOut = Val[File]
var dirName = Val[String]
var fileName = Val[String]
val parameterFile1 = Val[File]
val parameterFile2 = Val[File]
val rootDir = Val[File]
val dataDir = Val[File]

val parcelFolderName = "ParcelSelectionRepository"

val scenarioFolder = Val[File]
val variantFolder = Val[File]

val scenarioFolderName = Val[String]//"DDense"
val variantFolderName = Val[String]//"variante0"

val rootFolderName = "data"
val paramFolder = "paramFolder"
val paramSet = "paramSet"
val paramFileName1 = "parameterScenario.json"
val paramFileName2 = "parameterTechnic.json"

//val directoriesToAnalyze  = Val[Array[File]]
//val baseInputDir = workDirectory / parcelFolderName / scenarioFolderName / variantFolderName
//val dirSource = ListDirectoriesSource(baseInputDir, directoriesToAnalyze)//, ".*-.*")

val resultDirName = "SimPLU"
val resultDir = workDirectory / resultDirName

//val explo = ExplorationTask(dataDir in directoriesToAnalyze withName dirName)

val javaTask = ScalaTask(
    """
    |import artiscalesopenmoleplugin._
    |val folderOut = newDir()
    |folderOut.mkdirs()
    |withThreadClassLoader(classLoader(ArtiScalesTaskSimPLU))(ArtiScalesTaskSimPLU(rootDir, dataDir, folderOut, parameterFile1, parameterFile2))""".stripMargin) set (
  plugins += pluginsOf(artiscalesopenmoleplugin.ArtiScalesTaskSimPLU),
  rootDir := workDirectory / rootFolderName / paramFolder,
  inputs += (rootDir, dataDir, parameterFile1, parameterFile2, scenarioFolderName, variantFolderName, dirName),
  outputs += (folderOut, dataDir, scenarioFolderName, variantFolderName, dirName)
)
val copyHook =  CopyFileHook(folderOut,  workDirectory / resultDirName / "${scenarioFolderName}" / "${variantFolderName}" / "${dirName}/")

//val env = LocalEnvironment(4)

val env = EGIEnvironment("vo.complex-systems.eu")

//(explo source dirSource) -< (javaTask on env hook (copyHook)) when """dataDir.list.contains("parcelle.shp") && dataDir.list.contains("geoSnap")"""

val exploration = DirectSampling(
  evaluation = javaTask on env hook copyHook,
  sampling = 
    (
        (scenarioFolder in (workDirectory / parcelFolderName) withName scenarioFolderName) x
        (parameterFile1 is workDirectory / paramSet / "${scenarioFolderName}" / paramFileName1) x
        (parameterFile2 is workDirectory / paramSet / "${scenarioFolderName}" / paramFileName2) x
        (variantFolder in scenarioFolder withName variantFolderName) x
        (dataDir in variantFolder filter(_.isDirectory) withName dirName)
    )
)

exploration