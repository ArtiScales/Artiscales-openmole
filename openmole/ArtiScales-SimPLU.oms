val folderOut = Val[File]
var dirName = Val[String]
var fileName = Val[String]
val parameterFile1 = Val[File]
val parameterFile2 = Val[File]
val rootDir = Val[File]
val dataDir = Val[File]

val parcelFolderName = "ParcelSelectionDepot"
val scenarioFolderName = "DDense"
val variantFolderName = "variante0"

val rootFolder = "Root"
val paramFolder = "paramFolder"
val paramSet = "paramSet"
val paramFileName1 = "parameterScenario.json"
val paramFileName2 = "parameterTechnic.json"

val directoriesToAnalyze  = Val[Array[File]]
val baseInputDir = workDirectory / parcelFolderName / scenarioFolderName / variantFolderName
val dirSource = ListDirectoriesSource(baseInputDir, directoriesToAnalyze)//, ".*-.*")

val resultDirName = "SimPLU"
val resultDir = workDirectory / resultDirName

val explo = ExplorationTask(dataDir in directoriesToAnalyze withName dirName)

val javaTask = ScalaTask(
    """
    |import artiscalesopenmoleplugin._
    |val folderOut = newDir()
    |folderOut.mkdirs()
    |withThreadClassLoader(classLoader(ArtiScalesTaskSimPLU))(ArtiScalesTaskSimPLU(rootDir, dataDir, folderOut, parameterFile1, parameterFile2))""".stripMargin) set (
  plugins += pluginsOf(artiscalesopenmoleplugin.ArtiScalesTaskSimPLU),
  rootDir := workDirectory / rootFolder / paramFolder,
  parameterFile1 := workDirectory / rootFolder / paramFolder / paramSet / scenarioFolderName / paramFileName1,
  parameterFile2 := workDirectory / rootFolder / paramFolder / paramSet / scenarioFolderName / paramFileName2,
  inputs += (rootDir, dataDir, parameterFile1, parameterFile2, dirName),
  outputs += (folderOut, dataDir, dirName)
)
val copyHook =  CopyFileHook(folderOut,  workDirectory / resultDirName / scenarioFolderName / variantFolderName / "${dirName}/")

//val env = LocalEnvironment(4)

val env = EGIEnvironment("vo.complex-systems.eu")

(explo source dirSource) -< (javaTask on env hook (copyHook)) when """dataDir.list.contains("parcelle.shp") && dataDir.list.contains("geoSnap")"""
