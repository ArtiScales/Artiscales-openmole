val folderOut = Val[File]
var fileName = Val[String]
val parameterFile1 = Val[File]
val parameterFile2 = Val[File]
val rootDir = Val[File]
val dataFile = Val[File]
val zipCode = Val[String]

val scenarioFolder = Val[File]
val variantFolder = Val[File]

val scenarioFolderName = Val[String]//"DDense"
val variantFolderName = Val[String]//"variante0"

val rootFolderName = "data"
val MUPFolderName = "MupCityRepository"

val paramSet = "paramSet"
val paramFileName1 = "parameterScenario.json"
val paramFileName2 = "parameterTechnic.json"

val resultDirName = "ParcelManager"
val resultDir = workDirectory / resultDirName

val csvSampler = CSVSampling(workDirectory / "DEPCOMCities.csv") set (
  columns += ("zip", zipCode)
)

val javaTask = ScalaTask(
    """
    |import artiscalesopenmoleplugin._
    |val folderOut = newDir()
    |withThreadClassLoader(classLoader(ArtiScalesTaskParcelManager))(ArtiScalesTaskParcelManager(rootDir, folderOut, dataFile, parameterFile1, parameterFile2, zipCode))""".stripMargin) set (
  plugins += pluginsOf(artiscalesopenmoleplugin.ArtiScalesTaskParcelManager),
  rootDir := workDirectory / rootFolderName,
  inputs += (rootDir, dataFile, parameterFile1, parameterFile2, zipCode, scenarioFolderName, variantFolderName, scenarioFolder),
  outputs += (folderOut, dataFile, zipCode, scenarioFolderName, variantFolderName)
)

val copyHook =  CopyFileHook(folderOut,  workDirectory / resultDirName / "${scenarioFolderName}" / "${variantFolderName}")

//val env = LocalEnvironment(3)
val env = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 2000 megabytes)

val exploration = DirectSampling(
  evaluation = javaTask on env hook copyHook,
  sampling = 
    (
        csvSampler x 
        (scenarioFolder in (workDirectory / MUPFolderName) filter(_.isDirectory) withName scenarioFolderName) x
        (parameterFile1 is workDirectory / paramSet / "${scenarioFolderName}" / paramFileName1) x
        (parameterFile2 is workDirectory / paramSet / "${scenarioFolderName}" / paramFileName2) x
        (variantFolder in scenarioFolder filter(_.isDirectory) withName variantFolderName) x
        (dataFile in variantFolder filter(_.getName.endsWith(".shp")))
    )
)

exploration