val folderOut = Val[File]
var fileName = Val[String]
val parameterFile1 = Val[File]
val parameterFile2 = Val[File]
val rootDir = Val[File]
val dataFile = Val[File]
val zipCode = Val[String]

val rootFolderName = "Root"
val MUPFolderName = "MupCityDepot"
val scenarioFolderName = "DDense"
val variantFolderName = "variante0"

val paramFolder = "paramSet"
val paramFileName1 = "parameterScenario.json"
val paramFileName2 = "parameterTechnic.json"

val resultDirName = "ParcelManager"
val resultDir = workDirectory / resultDirName

val csvSampler = CSVSampling(workDirectory / "DEPCOMCities.csv") set (
  columns += ("zip", zipCode)
)

val javaTask = ScalaTask(
    """
    |import artiscalesopenmoleplugin._
    |val folderOut = newDir()
    |withThreadClassLoader(classLoader(ArtiScalesTaskParcelManager))(ArtiScalesTaskParcelManager(rootDir, folderOut, dataFile, parameterFile1, parameterFile2, zipCode))""".stripMargin) set (
  plugins += pluginsOf(artiscalesopenmoleplugin.ArtiScalesTaskParcelManager),
//  libraries += workDirectory / "artiscales-openmole-plugin_2.12-1.0.jar",
  rootDir := workDirectory / rootFolderName,
  parameterFile1 := workDirectory / paramFolder / scenarioFolderName / paramFileName1,
  parameterFile2 := workDirectory / paramFolder / scenarioFolderName / paramFileName2,
  inputs += (rootDir, dataFile, parameterFile1, parameterFile2, zipCode),
  outputs += (folderOut, dataFile, zipCode)
)

val copyHook =  CopyFileHook(folderOut,  workDirectory / resultDirName / scenarioFolderName / variantFolderName / "${zipCode}")

val env = LocalEnvironment(2)
//val env = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 2000 megabytes)

val exploration = DirectSampling(
  evaluation = javaTask on env hook copyHook,
  sampling = 
    (csvSampler x 
    (dataFile in (workDirectory / MUPFolderName / scenarioFolderName / variantFolderName) filter(_.getName.endsWith(".shp")) ) )
)

exploration