val folderOut = Val[File]
var dirName = Val[String]
var fileName = Val[String]
val parameterFile1 = Val[File]
val parameterFile2 = Val[File]
val rootDir = Val[File]
val dataDir = Val[File]

val rootFolderName = "ArtiScalesLikeTBLunch"
val MUPFolderName = "MupCityDepot"
val scenarioFolderName = "DDense"
val variantFolderName = "variante0"

val paramFileName1 = "parameterScenario.xml"
val paramFileName2 = "parameterTechnic.xml"
val directoriesToAnalyze  = Val[Array[File]]

val baseInputDir = workDirectory / MUPFolderName / scenarioFolderName / variantFolderName
val dirSource = ListDirectoriesSource(baseInputDir, directoriesToAnalyze, ".*-.*")

val resultDirName = "results"
val resultDir = workDirectory / resultDirName

val explo = ExplorationTask(dataDir in directoriesToAnalyze withName dirName)
  
val javaTask = ScalaTask(
    """
    |import artiscalesopenmoleplugin._
    |val folderOut = newDir()
    |withThreadClassLoader(classLoader(ArtiScalesTaskParcelManager))(ArtiScalesTaskParcelManager(rootDir, dataDir, folderOut, parameterFile1, parameterFile2))""".stripMargin) set (
  plugins += pluginsOf(artiscalesopenmoleplugin.ArtiScalesTaskParcelManager),
  rootDir := workDirectory / rootFolderName,
  parameterFile1 := workDirectory / paramFileName1,
  parameterFile2 := workDirectory / paramFileName2,
  inputs += (rootDir, dataDir, parameterFile1, parameterFile2, dirName),
  outputs += (folderOut, dataDir, dirName)
)
val copyHook =  CopyFileHook(folderOut,  workDirectory / resultDirName / scenarioFolderName / variantFolderName / "${dirName}/")

//val env = LocalEnvironment(2)
val env = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 2000 megabytes)

(explo source dirSource) -< (javaTask on env hook (copyHook))
