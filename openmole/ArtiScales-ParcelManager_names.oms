val folderOut = Val[File]
var fileName = Val[String]
val parameterFile1 = Val[File]
val parameterFile2 = Val[File]
val rootDir = Val[File]
val dataFile = Val[File]
val zipCode = Val[String]

val scenarioFolder = Val[File]
val variantFolder = Val[File]

val scenarioFolderName = Val[String]//"DDense"
val variantFolderName = Val[String]//"variante0"

val rootFolderName = "data"
val MUPFolderName = "MupCityRepository"

val paramSet = "paramSet"
val paramFileName1 = "parameterScenario.json"
val paramFileName2 = "parameterTechnic.json"

val o = Val[String]

val csvSampler = CSVSampling(workDirectory / "DEPCOMCities.csv") set (
  columns += ("zip", zipCode)
)

val env = LocalEnvironment(4)
//val env = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 2000 megabytes)

val myModel =
  ScalaTask("""val o = scenarioFolderName + "/" + variantFolderName + "/" + dataFile.getName + "/" + zipCode""") set (
  inputs += (dataFile, zipCode, parameterFile1, parameterFile2, scenarioFolderName, variantFolderName, scenarioFolder),
  outputs += (o,scenarioFolderName, variantFolderName,zipCode)
)
val resultDirName = "ParcelManager"

val outputPathWithZipCode = Expression[File](workDirectory / resultDirName / "${scenarioFolderName}" / "${variantFolderName}" / "${zipCode}")

val h = CSVHook(workDirectory / "names_missing.csv", values = Seq(scenarioFolderName,variantFolderName,zipCode))

val exploration = DirectSampling(
  evaluation = myModel hook h,
  sampling = 
    (
        (csvSampler) x 
        (scenarioFolder in (workDirectory / MUPFolderName) filter(_.isDirectory) withName scenarioFolderName) x
        (parameterFile1 is workDirectory / paramSet / "${scenarioFolderName}" / paramFileName1) x
        (parameterFile2 is workDirectory / paramSet / "${scenarioFolderName}" / paramFileName2) x
        (variantFolder in scenarioFolder filter(_.isDirectory) withName variantFolderName) x
        (dataFile in variantFolder filter(_.getName.endsWith(".shp")))
    ),
  condition = !outputPathWithZipCode.exists || outputPathWithZipCode.isEmpty
  //condition = outputPathWithZipCode.exists && !outputPathWithZipCode.isEmpty
)

exploration